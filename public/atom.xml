<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rails Micro Wins]]></title>
  <link href="http://www.railsmicrowins.com/atom.xml" rel="self"/>
  <link href="http://www.railsmicrowins.com/"/>
  <updated>2014-10-18T10:59:14-06:00</updated>
  <id>http://www.railsmicrowins.com/</id>
  <author>
    <name><![CDATA[Marc Garreau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Scopes]]></title>
    <link href="http://www.railsmicrowins.com/blog/2014/10/17/using-scopes/"/>
    <updated>2014-10-17T14:52:32-06:00</updated>
    <id>http://www.railsmicrowins.com/blog/2014/10/17/using-scopes</id>
    <content type="html"><![CDATA[<p>Scopes allow you to make (what amounts to) helper methods for
commonly used Active Record queries.</p>

<p>For example, we can easily display a restaurant&rsquo;s appropriate
seasonal menu using scopes. Within the model, we&rsquo;ll build a scope
for items on the winter seasonal menu:</p>

<figure class='code'><figcaption><span>item.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:winter</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">seasonal_menu</span><span class="p">:</span> <span class="s2">&quot;winter&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our items controller now, we can call <code>Item.winter</code> to pass
only those items on the winter menu to our view. We also experience
the joy of pushing logic from our controller, down to the model.</p>

<p>Scopes can also be chained, to form more specific queries:</p>

<figure class='code'><figcaption><span>item.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:winter</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">seasonal_menu</span><span class="p">:</span> <span class="s2">&quot;winter&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:winter_high_carb</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">winter</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;carbs &gt; 30&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another common use case for scopes is to redefine how our query results
are ordered by default. The helper method <code>default_scope</code> exists:</p>

<figure class='code'><figcaption><span>item.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">default_scope</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="s1">&#39;name ASC&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, items will now be displayed in alphabetical order by default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing RSpec in Rails]]></title>
    <link href="http://www.railsmicrowins.com/blog/2014/10/08/installing-rspec-in-rails/"/>
    <updated>2014-10-08T13:34:35-06:00</updated>
    <id>http://www.railsmicrowins.com/blog/2014/10/08/installing-rspec-in-rails</id>
    <content type="html"><![CDATA[<p>By default, you&rsquo;ll get a <code>test</code> folder with Minitest ready to rock when you generate a new rails project. Switching to the other team is a cinch though.</p>

<p>To generate a new rails project without a test suite, run:</p>

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>rails new sample_app -T</span></code></pre></td></tr></table></div></div>
        </div>


<p>Or to get rid of your Minitest folder in an existing project:</p>

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>rm -rf test/</span></code></pre></td></tr></table></div></div>
        </div>


<p>Next, add RSpec to your Gemfile:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install the new gem:</p>

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle install</span></code></pre></td></tr></table></div></div>
        </div>


<p>Then install RSpec:</p>

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>rails generate rspec:install</span></code></pre></td></tr></table></div></div>
        </div>


<p>Look at you go, with your fresh new <code>spec</code> folder in the root directory. Get testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an Admin Controller]]></title>
    <link href="http://www.railsmicrowins.com/blog/2014/10/07/creating-an-admin-controller-in-rails/"/>
    <updated>2014-10-07T19:21:52-06:00</updated>
    <id>http://www.railsmicrowins.com/blog/2014/10/07/creating-an-admin-controller-in-rails</id>
    <content type="html"><![CDATA[<h2>Why create an Admin Controller?</h2>

<p>It is easy enough to use something like <a href="https://github.com/CanCanCommunity/cancancan">CanCanCan</a>
to implement authorization, so why then would you need a separate Admin Controller for your application?</p>

<p>While CanCanCan provides a good base, adding an Admin Controller provides another layer of protection,
as the routes you are trying to protect simply do not exist unless you are properly authenticated as an Admin.</p>

<p>It is easy to leave a route unprotected or make a mistake if your edit/create/update/destroy routes are in
your public controllers, and having an Admin Controller helps prevent mistakes.</p>

<h2>Implementation</h2>

<ol>
<li>Within app/controllers, create another directory called &lsquo;admin&rsquo; and create an <code>admin_controller.rb</code> in that new directory.</li>
<li>Create each individual controller that you want in the admin namespace. For example, if you would like to only allow an admin to edit or delete an item, create a new Items Controller with those actions inside of the controllers/admin folder.</li>
<li>Remove the newly protection actions from the old Items Controller, leaving only those actions that you&rsquo;d like users to access (e.g. show and index).</li>
<li>Add the admin namespace to your routes file:</li>
</ol>


<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:admin</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:items</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">resources</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that our old Item Controller still maintains it&rsquo;s own routes, which we specify with <code>:index</code> and <code>:show</code>.</p>

<p>Now when we <code>rake routes</code>, you&rsquo;ll see the newly created namespaced routes:</p>

<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line output'>new_admin_item  GET   admin/items/new         admin/items#new
</span><span class='line output'>   admin_items  POST  admin/items(.:format)   admin/items#create
</span><span class='line output'>
</span><span class='line output'>  # etc...</span></code></pre></td></tr></table></div></div>
        </div>


<h2>Sticking Point</h2>

<p>Note that you will have to customize the POST from your admin forms:
<code>&lt;%= form_for(@item, :url =&gt; admin_item_path(@item) ) do |f| %&gt;</code></p>

<p><em>Authored by Ian Andersen (<a href="http://twitter.com/ianderse27">@ianderse27</a>). The original post is available <a href="http://mindfulprogramming.com/creating-an-admin-controller-in-rails/">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Paperclip]]></title>
    <link href="http://www.railsmicrowins.com/blog/2014/10/03/using-paperclip/"/>
    <updated>2014-10-03T22:53:14-06:00</updated>
    <id>http://www.railsmicrowins.com/blog/2014/10/03/using-paperclip</id>
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/thoughtbot/paperclip">Paperclip</a> allows us to upload, store and display images (and other files) in an application. In this example, we&rsquo;ll go from installation to displaying an image associated with an item. You may substitute &lsquo;item&rsquo; for any other model in your application.</p></blockquote>

<ul>
<li><p>Install imagemagick. It can be a real headache, so there is a dedicated guide here: <a href="#">(Coming soon)</a></p></li>
<li><p>Add paperclip to your application&rsquo;s Gemfile. At the time of writing, the latest version of paperclip is 4.2.</p></li>
</ul>


<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;paperclip&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.2.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Install the gem:</li>
</ul>


<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>bundle install</span></code></pre></td></tr></table></div></div>
        </div>


<ul>
<li>Since we&rsquo;re going to allow a user to add a photo to an item, we need to add the relationship and validation to our item.rb file.</li>
</ul>


<figure class='code'><figcaption><span>item.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">has_attached_file</span> <span class="ss">:image</span><span class="p">,</span> <span class="ss">styles</span><span class="p">:</span> <span class="p">{</span><span class="ss">:medium</span> <span class="o">=&gt;</span> <span class="s2">&quot;300x300&gt;&quot;</span><span class="p">,</span> <span class="ss">:thumb</span> <span class="o">=&gt;</span> <span class="s2">&quot;100x100#&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">validates_attachment</span> <span class="ss">:image</span><span class="p">,</span> <span class="ss">content_type</span><span class="p">:</span> <span class="p">{</span><span class="ss">content_type</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;image/jpeg&quot;</span><span class="p">,</span> <span class="s2">&quot;image/jpeg&quot;</span><span class="p">,</span> <span class="s2">&quot;image/png&quot;</span><span class="p">,</span> <span class="s2">&quot;image/gif&quot;</span><span class="o">]</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Paperclip allows us to specify what sizes we&rsquo;d like to save the uploaded image in, so you&rsquo;ll notice above that we&rsquo;ve specified two file sizes
with the nicknames of <code>:medium</code> and <code>:thumb</code>. This will make it easy to display those file sizes later.</p>

<p>The trailing <code>#</code> in <code>"100x100#"</code> results in the image being centrally cropped, with those exact dimensions. The trailing  <code>&gt;</code> in <code>"300x300&gt;"</code>
modifies the image only if its dimensions are larger than those specified.
You can view more imagemagick modifiers <a href="http://www.imagemagick.org/script/command-line-processing.php#geometry">here</a>.</p>

<ul>
<li>Generate the related migration</li>
</ul>


<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>rails generate paperclip item image</span></code></pre></td></tr></table></div></div>
        </div>


<ul>
<li>Then run the migration</li>
</ul>


<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span></pre></td><td class='code'><pre><code><span class='line command'>rake db:migrate</span></code></pre></td></tr></table></div></div>
        </div>


<ul>
<li>Next, we&rsquo;ll update the form in the edit item view to allow a user to select and upload a photo.
Notice the addition of <code>html: {multipart: true}</code> to the head of the form, as well as the new <code>file_field</code> input.</li>
</ul>


<figure class='code'><figcaption><span>edit.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="o">&lt;</span><span class="sx">%= form_for @item, html: {multipart: true} do |f| %&gt;</span>
</span><span class='line'><span class="sx">     &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:image</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">     &lt;%= f.file_field :image %&gt;</span>
</span><span class='line'>     <span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>In rails 4, the <code>:image</code> will have to be a part of your strong params to get processed, so add that in the items controller.</li>
</ul>


<figure class='code'><figcaption><span>items_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">item_params</span>
</span><span class='line'>  <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:item</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:image</span><span class="p">,</span> <span class="c1"># ... )</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Now that a user can uploaded an image, you can display an item&rsquo;s image using an <code>image_tag</code>.
You may specify any of the nicknames you saved earlier to display that image size (i.e. <code>:thumb</code> instead of <code>:medium</code>).</li>
</ul>


<figure class='code'><figcaption><span>show.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">image_tag</span> <span class="vi">@item</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="ss">:medium</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it!</p>

<p>If you&rsquo;d like your shiny new paperclip to work with your application on Heroku, you&rsquo;re going to need to use the aws-sdk gem. You can find that tutorial <a href="" title="#">here, soon.</a></p>

<p><em>Authored by <a href="http://twitter.com/marcgarreau">@MarcGarreau</a>.</em></p>
]]></content>
  </entry>
  
</feed>
